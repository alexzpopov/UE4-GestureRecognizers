// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GestureSample.h"
#include "GestureSample.generated.dep.h"
void EmptyLinkFunctionForGeneratedCodeGestureSample() {}
	void UGestureMathLibrary::StaticRegisterNativesUGestureMathLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGestureMathLibrary::StaticClass(),"AngleBetweenLines",(Native)&UGestureMathLibrary::execAngleBetweenLines);
	}
	IMPLEMENT_CLASS(UGestureMathLibrary, 405199249);
class UScriptStruct* FGestureTouchData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GESTURESAMPLE_API class UScriptStruct* Z_Construct_UScriptStruct_UGestureRecognizerComponent_FGestureTouchData();
		extern GESTURESAMPLE_API uint32 Get_Z_Construct_UScriptStruct_UGestureRecognizerComponent_FGestureTouchData_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_UGestureRecognizerComponent_FGestureTouchData, UGestureRecognizerComponent::StaticClass(), TEXT("GestureTouchData"), sizeof(FGestureTouchData), Get_Z_Construct_UScriptStruct_UGestureRecognizerComponent_FGestureTouchData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGestureTouchData(FGestureTouchData::StaticStruct, TEXT("/Script/GestureSample"));
	void UGestureRecognizerComponent::StaticRegisterNativesUGestureRecognizerComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UGestureRecognizerComponent::StaticClass(),"DetectGestures",(Native)&UGestureRecognizerComponent::execDetectGestures);
		UScriptStruct::DeferCppStructOps(FName(TEXT("GestureTouchData")),new UScriptStruct::TCppStructOps<FGestureTouchData>);
	}
	IMPLEMENT_CLASS(UGestureRecognizerComponent, 2366666770);
	void UDynamicGestureRecognizer::StaticRegisterNativesUDynamicGestureRecognizer()
	{
	}
	IMPLEMENT_CLASS(UDynamicGestureRecognizer, 3438468635);
	void UPanGestureRecognizer::StaticRegisterNativesUPanGestureRecognizer()
	{
		FNativeFunctionRegistrar::RegisterFunction(UPanGestureRecognizer::StaticClass(),"GetTouchCount",(Native)&UPanGestureRecognizer::execGetTouchCount);
		FNativeFunctionRegistrar::RegisterFunction(UPanGestureRecognizer::StaticClass(),"GetTouchPoints",(Native)&UPanGestureRecognizer::execGetTouchPoints);
		FNativeFunctionRegistrar::RegisterFunction(UPanGestureRecognizer::StaticClass(),"LastMoveDistanceForFirstTouch",(Native)&UPanGestureRecognizer::execLastMoveDistanceForFirstTouch);
		FNativeFunctionRegistrar::RegisterFunction(UPanGestureRecognizer::StaticClass(),"LastMoveDistanceForTouch",(Native)&UPanGestureRecognizer::execLastMoveDistanceForTouch);
	}
	IMPLEMENT_CLASS(UPanGestureRecognizer, 2184708482);
	void UPinchRotateGestureRecognizer::StaticRegisterNativesUPinchRotateGestureRecognizer()
	{
	}
	IMPLEMENT_CLASS(UPinchRotateGestureRecognizer, 1296471203);
	void UInstantTapRecognizer::StaticRegisterNativesUInstantTapRecognizer()
	{
	}
	IMPLEMENT_CLASS(UInstantTapRecognizer, 3309813387);
class UScriptStruct* FGestureSupportedSwipeTypes::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern GESTURESAMPLE_API class UScriptStruct* Z_Construct_UScriptStruct_USwipeGestureRecognizer_FGestureSupportedSwipeTypes();
		extern GESTURESAMPLE_API uint32 Get_Z_Construct_UScriptStruct_USwipeGestureRecognizer_FGestureSupportedSwipeTypes_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_USwipeGestureRecognizer_FGestureSupportedSwipeTypes, USwipeGestureRecognizer::StaticClass(), TEXT("GestureSupportedSwipeTypes"), sizeof(FGestureSupportedSwipeTypes), Get_Z_Construct_UScriptStruct_USwipeGestureRecognizer_FGestureSupportedSwipeTypes_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGestureSupportedSwipeTypes(FGestureSupportedSwipeTypes::StaticStruct, TEXT("/Script/GestureSample"));
	void USwipeGestureRecognizer::StaticRegisterNativesUSwipeGestureRecognizer()
	{
		FNativeFunctionRegistrar::RegisterFunction(USwipeGestureRecognizer::StaticClass(),"DelayHandleSwipe",(Native)&USwipeGestureRecognizer::execDelayHandleSwipe);
		FNativeFunctionRegistrar::RegisterFunction(USwipeGestureRecognizer::StaticClass(),"GetSwipeType",(Native)&USwipeGestureRecognizer::execGetSwipeType);
		UScriptStruct::DeferCppStructOps(FName(TEXT("GestureSupportedSwipeTypes")),new UScriptStruct::TCppStructOps<FGestureSupportedSwipeTypes>);
	}
	IMPLEMENT_CLASS(USwipeGestureRecognizer, 2905953150);
	void UTapGestureRecognizer::StaticRegisterNativesUTapGestureRecognizer()
	{
		FNativeFunctionRegistrar::RegisterFunction(UTapGestureRecognizer::StaticClass(),"GetTapLocation",(Native)&UTapGestureRecognizer::execGetTapLocation);
		FNativeFunctionRegistrar::RegisterFunction(UTapGestureRecognizer::StaticClass(),"TapWasOnBottomHalf",(Native)&UTapGestureRecognizer::execTapWasOnBottomHalf);
		FNativeFunctionRegistrar::RegisterFunction(UTapGestureRecognizer::StaticClass(),"TapWasOnLeftHalf",(Native)&UTapGestureRecognizer::execTapWasOnLeftHalf);
		FNativeFunctionRegistrar::RegisterFunction(UTapGestureRecognizer::StaticClass(),"TapWasOnRightHalf",(Native)&UTapGestureRecognizer::execTapWasOnRightHalf);
		FNativeFunctionRegistrar::RegisterFunction(UTapGestureRecognizer::StaticClass(),"TapWasOnTopHalf",(Native)&UTapGestureRecognizer::execTapWasOnTopHalf);
	}
	IMPLEMENT_CLASS(UTapGestureRecognizer, 2998200282);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_UObject_FVector2D();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();

	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UGestureMathLibrary_AngleBetweenLines();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UGestureMathLibrary_NoRegister();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UGestureMathLibrary();
	GESTURESAMPLE_API class UScriptStruct* Z_Construct_UScriptStruct_UGestureRecognizerComponent_FGestureTouchData();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UGestureRecognizerComponent_DetectGestures();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UGestureRecognizerComponent_GestureEnded__DelegateSignature();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UGestureRecognizerComponent_NoRegister();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UGestureRecognizerComponent();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UDynamicGestureRecognizer_GestureMoved__DelegateSignature();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UDynamicGestureRecognizer_NoRegister();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UDynamicGestureRecognizer();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UPanGestureRecognizer_GetTouchCount();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UPanGestureRecognizer_GetTouchPoints();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UPanGestureRecognizer_LastMoveDistanceForFirstTouch();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UPanGestureRecognizer_LastMoveDistanceForTouch();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UPanGestureRecognizer_NoRegister();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UPanGestureRecognizer();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UPinchRotateGestureRecognizer_NoRegister();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UPinchRotateGestureRecognizer();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UInstantTapRecognizer_GestureStarted__DelegateSignature();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UInstantTapRecognizer_NoRegister();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UInstantTapRecognizer();
	GESTURESAMPLE_API class UEnum* Z_Construct_UEnum_USwipeGestureRecognizer_ESwipeType();
	GESTURESAMPLE_API class UScriptStruct* Z_Construct_UScriptStruct_USwipeGestureRecognizer_FGestureSupportedSwipeTypes();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_USwipeGestureRecognizer_DelayHandleSwipe();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_USwipeGestureRecognizer_GetSwipeType();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_USwipeGestureRecognizer_NoRegister();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_USwipeGestureRecognizer();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UTapGestureRecognizer_GetTapLocation();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnBottomHalf();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnLeftHalf();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnRightHalf();
	GESTURESAMPLE_API class UFunction* Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnTopHalf();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UTapGestureRecognizer_NoRegister();
	GESTURESAMPLE_API class UClass* Z_Construct_UClass_UTapGestureRecognizer();
	GESTURESAMPLE_API class UPackage* Z_Construct_UPackage_GestureSample();
	UFunction* Z_Construct_UFunction_UGestureMathLibrary_AngleBetweenLines()
	{
		struct GestureMathLibrary_eventAngleBetweenLines_Parms
		{
			FVector2D Line1Start;
			FVector2D Line1End;
			FVector2D Line2Start;
			FVector2D Line2End;
			float ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UGestureMathLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AngleBetweenLines"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14C22401, 65535, sizeof(GestureMathLibrary_eventAngleBetweenLines_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, GestureMathLibrary_eventAngleBetweenLines_Parms), 0x0000000000000580);
			UProperty* NewProp_Line2End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Line2End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Line2End, GestureMathLibrary_eventAngleBetweenLines_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_UObject_FVector2D());
			UProperty* NewProp_Line2Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Line2Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Line2Start, GestureMathLibrary_eventAngleBetweenLines_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_UObject_FVector2D());
			UProperty* NewProp_Line1End = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Line1End"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Line1End, GestureMathLibrary_eventAngleBetweenLines_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_UObject_FVector2D());
			UProperty* NewProp_Line1Start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Line1Start"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Line1Start, GestureMathLibrary_eventAngleBetweenLines_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_UObject_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Republic Sniper|Math|Gesture Utils"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("GestureMathLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Calculates the angle between two lines in 2D space\n\n@param       Line1Start      - The start point of the first line\n@param       Line1End - The end point of the first line\n@param       Line2Start - The start point of the second line\n@param       Line2End - The end point of the second line\n@result      The angle between the two lines in Radians"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("GestureMathLibrary.h"));
			MetaData->SetValue(NewProp_Line2End, TEXT("ModuleRelativePath"), TEXT("GestureMathLibrary.h"));
			MetaData->SetValue(NewProp_Line2Start, TEXT("ModuleRelativePath"), TEXT("GestureMathLibrary.h"));
			MetaData->SetValue(NewProp_Line1End, TEXT("ModuleRelativePath"), TEXT("GestureMathLibrary.h"));
			MetaData->SetValue(NewProp_Line1Start, TEXT("ModuleRelativePath"), TEXT("GestureMathLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGestureMathLibrary_NoRegister()
	{
		return UGestureMathLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UGestureMathLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_GestureSample();
			OuterClass = UGestureMathLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UGestureMathLibrary_AngleBetweenLines());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGestureMathLibrary_AngleBetweenLines()); // 2041101573
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GestureMathLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("GestureMathLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGestureMathLibrary(Z_Construct_UClass_UGestureMathLibrary, TEXT("UGestureMathLibrary"));
	UScriptStruct* Z_Construct_UScriptStruct_UGestureRecognizerComponent_FGestureTouchData()
	{
		UStruct* Outer=Z_Construct_UClass_UGestureRecognizerComponent();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GestureTouchData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGestureTouchData>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTouchStarted, FGestureTouchData, bool);
			UProperty* NewProp_bIsTouchStarted = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsTouchStarted"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTouchStarted, FGestureTouchData), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsTouchStarted, FGestureTouchData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTouchEnded, FGestureTouchData, bool);
			UProperty* NewProp_bIsTouchEnded = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsTouchEnded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTouchEnded, FGestureTouchData), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bIsTouchEnded, FGestureTouchData), sizeof(bool), true);
			UProperty* NewProp_LatestTouchTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LatestTouchTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LatestTouchTime, FGestureTouchData), 0x0000000000000000);
			UProperty* NewProp_FirstTouchTime = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FirstTouchTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FirstTouchTime, FGestureTouchData), 0x0000000000000000);
			UProperty* NewProp_TouchEndTimes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TouchEndTimes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TouchEndTimes, FGestureTouchData), 0x0000000000000000);
			UProperty* NewProp_TouchEndTimes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TouchEndTimes, TEXT("TouchEndTimes"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_TouchStartTimes = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TouchStartTimes"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TouchStartTimes, FGestureTouchData), 0x0000000000000000);
			UProperty* NewProp_TouchStartTimes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TouchStartTimes, TEXT("TouchStartTimes"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_TouchPoints = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TouchPoints"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TouchPoints, FGestureTouchData), 0x0000000000000000);
			UProperty* NewProp_TouchPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TouchPoints, TEXT("TouchPoints"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_UObject_FVector2D());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(NewProp_bIsTouchStarted, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(NewProp_bIsTouchEnded, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(NewProp_bIsTouchEnded, TEXT("ToolTip"), TEXT("Returns true if the finger associated with this touch has lifted from the screen"));
			MetaData->SetValue(NewProp_LatestTouchTime, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(NewProp_LatestTouchTime, TEXT("ToolTip"), TEXT("The time of the most recent detected touch of this gesture"));
			MetaData->SetValue(NewProp_FirstTouchTime, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(NewProp_FirstTouchTime, TEXT("ToolTip"), TEXT("The time of the first detected touch of this gesture"));
			MetaData->SetValue(NewProp_TouchEndTimes, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(NewProp_TouchStartTimes, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(NewProp_TouchPoints, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_UGestureRecognizerComponent_FGestureTouchData_CRC() { return 3733430476U; }
	UFunction* Z_Construct_UFunction_UGestureRecognizerComponent_DetectGestures()
	{
		struct GestureRecognizerComponent_eventDetectGestures_Parms
		{
			float DeltaTime;
		};
		UClass* OuterClass=Z_Construct_UClass_UGestureRecognizerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DetectGestures"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020400, 65535, sizeof(GestureRecognizerComponent_eventDetectGestures_Parms));
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, GestureRecognizerComponent_eventDetectGestures_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Detection"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Subclasses should override this to detect gestures that require tick-level precision *"));
			MetaData->SetValue(NewProp_DeltaTime, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UGestureRecognizerComponent_GestureEnded__DelegateSignature()
	{
		struct GestureRecognizerComponent_eventGestureEnded_Parms
		{
			UGestureRecognizerComponent* Recognizer;
			float DeltaTime;
		};
		UClass* OuterClass=Z_Construct_UClass_UGestureRecognizerComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GestureEnded__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(GestureRecognizerComponent_eventGestureEnded_Parms));
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, GestureRecognizerComponent_eventGestureEnded_Parms), 0x0000000000000080);
			UProperty* NewProp_Recognizer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Recognizer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Recognizer, GestureRecognizerComponent_eventGestureEnded_Parms), 0x0000000000080080, Z_Construct_UClass_UGestureRecognizerComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(NewProp_DeltaTime, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
			MetaData->SetValue(NewProp_Recognizer, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Recognizer, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UGestureRecognizerComponent_NoRegister()
	{
		return UGestureRecognizerComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UGestureRecognizerComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage_GestureSample();
			OuterClass = UGestureRecognizerComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UScriptStruct_UGestureRecognizerComponent_FGestureTouchData()); // 3733430476
				OuterClass->LinkChild(Z_Construct_UFunction_UGestureRecognizerComponent_DetectGestures());
				OuterClass->LinkChild(Z_Construct_UFunction_UGestureRecognizerComponent_GestureEnded__DelegateSignature());

				UProperty* NewProp_GestureEndedDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GestureEndedDelegate"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(GestureEndedDelegate, UGestureRecognizerComponent), 0x0000000010080000, Z_Construct_UFunction_UGestureRecognizerComponent_GestureEnded__DelegateSignature());
				UProperty* NewProp_DelayBeforeResetting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelayBeforeResetting"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DelayBeforeResetting, UGestureRecognizerComponent), 0x0000000000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFlushTouchDataOnGestureEnded, UGestureRecognizerComponent, bool);
				UProperty* NewProp_bFlushTouchDataOnGestureEnded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bFlushTouchDataOnGestureEnded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFlushTouchDataOnGestureEnded, UGestureRecognizerComponent), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bFlushTouchDataOnGestureEnded, UGestureRecognizerComponent), sizeof(bool), true);
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGestureRecognizerComponent_DetectGestures()); // 566788178
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UGestureRecognizerComponent_GestureEnded__DelegateSignature()); // 2763266067
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Input"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("GestureRecognizerComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for gesture recognizer components. This class doesn't recognize any gestures, it simply provides a base class that concrete gesture recognizers can use"));
				MetaData->SetValue(NewProp_GestureEndedDelegate, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_GestureEndedDelegate, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
				MetaData->SetValue(NewProp_GestureEndedDelegate, TEXT("ToolTip"), TEXT("Delegate function called when a gesture is completed. For simple gestures, like swipes and taps, this is the only delegate function that will get called. For ongoing gestures, this will indicate that the gesture has ended and no more FGestureMoved calls will happen until the next gesture starts."));
				MetaData->SetValue(NewProp_DelayBeforeResetting, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
				MetaData->SetValue(NewProp_DelayBeforeResetting, TEXT("ToolTip"), TEXT("If touch data is flushed, this is an optional delay before flushing"));
				MetaData->SetValue(NewProp_bFlushTouchDataOnGestureEnded, TEXT("ModuleRelativePath"), TEXT("GestureRecognizerComponent.h"));
				MetaData->SetValue(NewProp_bFlushTouchDataOnGestureEnded, TEXT("ToolTip"), TEXT("If touch data should be flushed when the last finger is removed from the screen. Subclasses that change this to `false` are responsible for manually flushing touch data when appropriate"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UGestureRecognizerComponent(Z_Construct_UClass_UGestureRecognizerComponent, TEXT("UGestureRecognizerComponent"));
	UFunction* Z_Construct_UFunction_UDynamicGestureRecognizer_GestureMoved__DelegateSignature()
	{
		struct DynamicGestureRecognizer_eventGestureMoved_Parms
		{
			UGestureRecognizerComponent* Recognizer;
			float DeltaTime;
		};
		UClass* OuterClass=Z_Construct_UClass_UDynamicGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GestureMoved__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(DynamicGestureRecognizer_eventGestureMoved_Parms));
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, DynamicGestureRecognizer_eventGestureMoved_Parms), 0x0000000000000080);
			UProperty* NewProp_Recognizer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Recognizer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Recognizer, DynamicGestureRecognizer_eventGestureMoved_Parms), 0x0000000000080080, Z_Construct_UClass_UGestureRecognizerComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("DynamicGestureRecognizer.h"));
			MetaData->SetValue(NewProp_DeltaTime, TEXT("ModuleRelativePath"), TEXT("DynamicGestureRecognizer.h"));
			MetaData->SetValue(NewProp_Recognizer, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Recognizer, TEXT("ModuleRelativePath"), TEXT("DynamicGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UDynamicGestureRecognizer_NoRegister()
	{
		return UDynamicGestureRecognizer::StaticClass();
	}
	UClass* Z_Construct_UClass_UDynamicGestureRecognizer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGestureRecognizerComponent();
			Z_Construct_UPackage_GestureSample();
			OuterClass = UDynamicGestureRecognizer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UDynamicGestureRecognizer_GestureMoved__DelegateSignature());

				UProperty* NewProp_GestureMovedDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GestureMovedDelegate"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(GestureMovedDelegate, UDynamicGestureRecognizer), 0x0000000010080000, Z_Construct_UFunction_UDynamicGestureRecognizer_GestureMoved__DelegateSignature());
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UDynamicGestureRecognizer_GestureMoved__DelegateSignature()); // 3893518345
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Input"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("DynamicGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("DynamicGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for gesture recognizers that continually update their delegate during the gesture, rather than waiting for the gesture to be finished."));
				MetaData->SetValue(NewProp_GestureMovedDelegate, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_GestureMovedDelegate, TEXT("ModuleRelativePath"), TEXT("DynamicGestureRecognizer.h"));
				MetaData->SetValue(NewProp_GestureMovedDelegate, TEXT("ToolTip"), TEXT("Delegate function called for ongoing gestures. This value is used, for example, to repeatedly provide the current values of a pinch or rotate gesture"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UDynamicGestureRecognizer(Z_Construct_UClass_UDynamicGestureRecognizer, TEXT("UDynamicGestureRecognizer"));
	UFunction* Z_Construct_UFunction_UPanGestureRecognizer_GetTouchCount()
	{
		struct PanGestureRecognizer_eventGetTouchCount_Parms
		{
			int32 ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UPanGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GetTouchCount"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PanGestureRecognizer_eventGetTouchCount_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, PanGestureRecognizer_eventGetTouchCount_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Allows delegate access to the number of fingers currently touching the screen"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanGestureRecognizer_GetTouchPoints()
	{
		struct PanGestureRecognizer_eventGetTouchPoints_Parms
		{
			TArray<FVector2D> ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UPanGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GetTouchPoints"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PanGestureRecognizer_eventGetTouchPoints_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, PanGestureRecognizer_eventGetTouchPoints_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_UObject_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanGestureRecognizer_LastMoveDistanceForFirstTouch()
	{
		struct PanGestureRecognizer_eventLastMoveDistanceForFirstTouch_Parms
		{
			FVector2D ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UPanGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastMoveDistanceForFirstTouch"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(PanGestureRecognizer_eventLastMoveDistanceForFirstTouch_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PanGestureRecognizer_eventLastMoveDistanceForFirstTouch_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_UObject_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convenience function to retrieve the distance moved by the first finger since the last delegate call"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UPanGestureRecognizer_LastMoveDistanceForTouch()
	{
		struct PanGestureRecognizer_eventLastMoveDistanceForTouch_Parms
		{
			int32 Touch;
			FVector2D ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UPanGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastMoveDistanceForTouch"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(PanGestureRecognizer_eventLastMoveDistanceForTouch_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PanGestureRecognizer_eventLastMoveDistanceForTouch_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_UObject_FVector2D());
			UProperty* NewProp_Touch = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Touch"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Touch, PanGestureRecognizer_eventLastMoveDistanceForTouch_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Convenience function to retrieve the distance moved by any finger since the last delegate call"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
			MetaData->SetValue(NewProp_Touch, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPanGestureRecognizer_NoRegister()
	{
		return UPanGestureRecognizer::StaticClass();
	}
	UClass* Z_Construct_UClass_UPanGestureRecognizer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDynamicGestureRecognizer();
			Z_Construct_UPackage_GestureSample();
			OuterClass = UPanGestureRecognizer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UPanGestureRecognizer_GetTouchCount());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanGestureRecognizer_GetTouchPoints());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanGestureRecognizer_LastMoveDistanceForFirstTouch());
				OuterClass->LinkChild(Z_Construct_UFunction_UPanGestureRecognizer_LastMoveDistanceForTouch());

				UProperty* NewProp_TouchPoints = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchPoints"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TouchPoints, UPanGestureRecognizer), 0x0000000000020801, Z_Construct_UScriptStruct_UObject_FVector2D());
				NewProp_TouchPoints->ArrayDim = CPP_ARRAY_DIM(TouchPoints, UPanGestureRecognizer);
				UProperty* NewProp_MaximumTouchCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumTouchCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumTouchCount, UPanGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MinimumTouchCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumTouchCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumTouchCount, UPanGestureRecognizer), 0x0000000000000001);
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanGestureRecognizer_GetTouchCount()); // 1665744198
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanGestureRecognizer_GetTouchPoints()); // 431568207
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanGestureRecognizer_LastMoveDistanceForFirstTouch()); // 3729112174
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UPanGestureRecognizer_LastMoveDistanceForTouch()); // 3316165084
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Input"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PanGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Recognizes pan gestures - one or more fingers moving around the screen. NOTE - this gesture recognizer is unfinished and should not be relied up on for production work."));
				MetaData->SetValue(NewProp_TouchPoints, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_TouchPoints, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
				MetaData->SetValue(NewProp_TouchPoints, TEXT("ToolTip"), TEXT("Access to the position of each key for the delegate method"));
				MetaData->SetValue(NewProp_MaximumTouchCount, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MaximumTouchCount, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MaximumTouchCount, TEXT("ToolTip"), TEXT("The maximum number of fingers that can be down for the delegate to be notified"));
				MetaData->SetValue(NewProp_MinimumTouchCount, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MinimumTouchCount, TEXT("ModuleRelativePath"), TEXT("PanGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MinimumTouchCount, TEXT("ToolTip"), TEXT("The minimum number of fingers that must be touching the screen in order for the delegate to be notified"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPanGestureRecognizer(Z_Construct_UClass_UPanGestureRecognizer, TEXT("UPanGestureRecognizer"));
	UClass* Z_Construct_UClass_UPinchRotateGestureRecognizer_NoRegister()
	{
		return UPinchRotateGestureRecognizer::StaticClass();
	}
	UClass* Z_Construct_UClass_UPinchRotateGestureRecognizer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDynamicGestureRecognizer();
			Z_Construct_UPackage_GestureSample();
			OuterClass = UPinchRotateGestureRecognizer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;


				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsRotating, UPinchRotateGestureRecognizer, bool);
				UProperty* NewProp_bIsRotating = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsRotating"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsRotating, UPinchRotateGestureRecognizer), 0x0000000000020815, CPP_BOOL_PROPERTY_BITMASK(bIsRotating, UPinchRotateGestureRecognizer), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsPinching, UPinchRotateGestureRecognizer, bool);
				UProperty* NewProp_bIsPinching = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsPinching"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsPinching, UPinchRotateGestureRecognizer), 0x0000000000020815, CPP_BOOL_PROPERTY_BITMASK(bIsPinching, UPinchRotateGestureRecognizer), sizeof(bool), true);
				UProperty* NewProp_AccumulatedDistanceChange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AccumulatedDistanceChange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AccumulatedDistanceChange, UPinchRotateGestureRecognizer), 0x0000000000020815);
				UProperty* NewProp_DeltaDistancePixels = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeltaDistancePixels"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaDistancePixels, UPinchRotateGestureRecognizer), 0x0000000000020815);
				UProperty* NewProp_AccumulatedAngleChange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AccumulatedAngleChange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AccumulatedAngleChange, UPinchRotateGestureRecognizer), 0x0000000000020815);
				UProperty* NewProp_DeltaRotationDegrees = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeltaRotationDegrees"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaRotationDegrees, UPinchRotateGestureRecognizer), 0x0000000000020815);
				UProperty* NewProp_MinimumDistanceChangeForPinch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumDistanceChangeForPinch"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinimumDistanceChangeForPinch, UPinchRotateGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MinimumAngleChangeForRotate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumAngleChangeForRotate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinimumAngleChangeForRotate, UPinchRotateGestureRecognizer), 0x0000000000000001);
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Input"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Gesture recognizer for two-finger pinch and rotate gestures"));
				MetaData->SetValue(NewProp_bIsRotating, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_bIsRotating, TEXT("ModuleRelativePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(NewProp_bIsRotating, TEXT("ToolTip"), TEXT("Whether a rotate has started. Delegate will only get notified if this or bIsPinching are true"));
				MetaData->SetValue(NewProp_bIsPinching, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_bIsPinching, TEXT("ModuleRelativePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(NewProp_bIsPinching, TEXT("ToolTip"), TEXT("Whether a pinch has started. Delegate will only get notified if this or bIsRotating is true"));
				MetaData->SetValue(NewProp_AccumulatedDistanceChange, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_AccumulatedDistanceChange, TEXT("ModuleRelativePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(NewProp_AccumulatedDistanceChange, TEXT("ToolTip"), TEXT("The total change in distance in pixels since the pinch started"));
				MetaData->SetValue(NewProp_DeltaDistancePixels, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_DeltaDistancePixels, TEXT("ModuleRelativePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(NewProp_DeltaDistancePixels, TEXT("ToolTip"), TEXT("The change in distance in pixels between the two touches since the last GestureMoved delegate call"));
				MetaData->SetValue(NewProp_AccumulatedAngleChange, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_AccumulatedAngleChange, TEXT("ModuleRelativePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(NewProp_AccumulatedAngleChange, TEXT("ToolTip"), TEXT("The angle change (degrees) since the gesture started. Note, any time the number of fingers being used stops being two, that resets the accumulation. When you go back to two fingers, it's treated as a new gesture, even if all fingers haven't been taken off the device"));
				MetaData->SetValue(NewProp_DeltaRotationDegrees, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_DeltaRotationDegrees, TEXT("ModuleRelativePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(NewProp_DeltaRotationDegrees, TEXT("ToolTip"), TEXT("The angle change since the last GestureMoved delegate call"));
				MetaData->SetValue(NewProp_MinimumDistanceChangeForPinch, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MinimumDistanceChangeForPinch, TEXT("ModuleRelativePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MinimumDistanceChangeForPinch, TEXT("ToolTip"), TEXT("The smallest change in distance (pixels) between two fingers before the gesture is recognized as a pinch"));
				MetaData->SetValue(NewProp_MinimumAngleChangeForRotate, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MinimumAngleChangeForRotate, TEXT("ModuleRelativePath"), TEXT("PinchRotateGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MinimumAngleChangeForRotate, TEXT("ToolTip"), TEXT("The smallest change in angle (degrees) between two fingers before the gesture is recognized as rotating"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPinchRotateGestureRecognizer(Z_Construct_UClass_UPinchRotateGestureRecognizer, TEXT("UPinchRotateGestureRecognizer"));
	UFunction* Z_Construct_UFunction_UInstantTapRecognizer_GestureStarted__DelegateSignature()
	{
		struct InstantTapRecognizer_eventGestureStarted_Parms
		{
			UInstantTapRecognizer* Recognizer;
			float DeltaTime;
		};
		UClass* OuterClass=Z_Construct_UClass_UInstantTapRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GestureStarted__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(InstantTapRecognizer_eventGestureStarted_Parms));
			UProperty* NewProp_DeltaTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("DeltaTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DeltaTime, InstantTapRecognizer_eventGestureStarted_Parms), 0x0000000000000080);
			UProperty* NewProp_Recognizer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Recognizer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Recognizer, InstantTapRecognizer_eventGestureStarted_Parms), 0x0000000000080080, Z_Construct_UClass_UInstantTapRecognizer_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("InstantTapRecognizer.h"));
			MetaData->SetValue(NewProp_DeltaTime, TEXT("ModuleRelativePath"), TEXT("InstantTapRecognizer.h"));
			MetaData->SetValue(NewProp_Recognizer, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_Recognizer, TEXT("ModuleRelativePath"), TEXT("InstantTapRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UInstantTapRecognizer_NoRegister()
	{
		return UInstantTapRecognizer::StaticClass();
	}
	UClass* Z_Construct_UClass_UInstantTapRecognizer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGestureRecognizerComponent();
			Z_Construct_UPackage_GestureSample();
			OuterClass = UInstantTapRecognizer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UInstantTapRecognizer_GestureStarted__DelegateSignature());

				UProperty* NewProp_GestureStartedDelegate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GestureStartedDelegate"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(GestureStartedDelegate, UInstantTapRecognizer), 0x0000000010080000, Z_Construct_UFunction_UGestureRecognizerComponent_GestureEnded__DelegateSignature());
				UProperty* NewProp_TouchLocation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TouchLocation, UInstantTapRecognizer), 0x0000000000020801, Z_Construct_UScriptStruct_UObject_FVector2D());
				UProperty* NewProp_WhichFinger = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WhichFinger"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(WhichFinger, UInstantTapRecognizer), 0x0000000000020801);
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UInstantTapRecognizer_GestureStarted__DelegateSignature()); // 4015478730
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("InstantTapRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("InstantTapRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("The regular `UTapGestureRecognizer` has a slight delay built in after a finger has left the screen so that it can detect multiple taps (double-taps, triple-taps) without triggering the delegate multiple times (e.g. no single tap delegate call when double tapped). Sometimes, in games, however, you want to know the second any finger touches the screen so that there's no delay. This simple gesture recognizer tells you immediately if a finger touches the screen or is removed from the scren. All it tells you is which finger where it touched. That touch may end up being part of another gesture, so it's your responsibility to make sure the tap doesn't have any unintended side effects. The GestureEndedDelegate is used to tell the delegate when any finger has been taken off the screen, and GestureStartedDelegate is used to tell the delegate when a finger has first touched the screen."));
				MetaData->SetValue(NewProp_GestureStartedDelegate, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_GestureStartedDelegate, TEXT("ModuleRelativePath"), TEXT("InstantTapRecognizer.h"));
				MetaData->SetValue(NewProp_GestureStartedDelegate, TEXT("ToolTip"), TEXT("Delegate function called when a finger first touches the screen."));
				MetaData->SetValue(NewProp_TouchLocation, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_TouchLocation, TEXT("ModuleRelativePath"), TEXT("InstantTapRecognizer.h"));
				MetaData->SetValue(NewProp_TouchLocation, TEXT("ToolTip"), TEXT("Used by delegates to get the location of the touch. Only guaranteed to be correct during the delegate call."));
				MetaData->SetValue(NewProp_WhichFinger, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_WhichFinger, TEXT("ModuleRelativePath"), TEXT("InstantTapRecognizer.h"));
				MetaData->SetValue(NewProp_WhichFinger, TEXT("ToolTip"), TEXT("Use by delegates to identify which finger touched the screen. Only guaranteed to be correct during the delegate call."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UInstantTapRecognizer(Z_Construct_UClass_UInstantTapRecognizer, TEXT("UInstantTapRecognizer"));
	UEnum* Z_Construct_UEnum_USwipeGestureRecognizer_ESwipeType()
	{
		UClass* Outer=Z_Construct_UClass_USwipeGestureRecognizer();
		static UEnum* ReturnEnum = NULL;
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ESwipeType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<FName> EnumNames;
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeNone")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeLeft")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeRight")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeUp")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeDown")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeUpRight")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeUpLeft")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeDownRight")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeDownLeft")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeFromLeftEdge")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeFromTopEdge")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeFromRightEdge")));
			EnumNames.Add(FName(TEXT("ESwipeType::SwipeFromBottomEdge")));
			EnumNames.Add(FName(TEXT("ESwipeType::ESwipeType_MAX")));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeDown.DisplayName"), TEXT("Swipe Down"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeDownLeft.DisplayName"), TEXT("Diagonal Swipe Down and Left"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeDownRight.DisplayName"), TEXT("Diagonal Swipe Down and Right"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeFromBottomEdge.DisplayName"), TEXT("Swipe up from Bottom Edge"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeFromLeftEdge.DisplayName"), TEXT("Swipe in from Left Edge"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeFromRightEdge.DisplayName"), TEXT("Swipe in from Right Edge"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeFromTopEdge.DisplayName"), TEXT("Swipe down from Top Edge"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeLeft.DisplayName"), TEXT("Swipe Left"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeNone.DisplayName"), TEXT("No Swipe"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeRight.DisplayName"), TEXT("Swipe Right"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeUp.DisplayName"), TEXT("Swipe Up"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeUpLeft.DisplayName"), TEXT("Diagonal Swipe Up and Left"));
			MetaData->SetValue(ReturnEnum, TEXT("SwipeUpRight.DisplayName"), TEXT("Diagonal Swipe Up and Right"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("The supported types of swipes this recognizer can identify //\"BlueprintType\" is essential to include"));
#endif
		}
		return ReturnEnum;
	}
	UScriptStruct* Z_Construct_UScriptStruct_USwipeGestureRecognizer_FGestureSupportedSwipeTypes()
	{
		UStruct* Outer=Z_Construct_UClass_USwipeGestureRecognizer();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GestureSupportedSwipeTypes"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGestureSupportedSwipeTypes>, EStructFlags(0x00000001));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeFromBottomEdge, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeFromBottomEdge = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeFromBottomEdge"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeFromBottomEdge, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeFromBottomEdge, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeFromTopEdge, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeFromTopEdge = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeFromTopEdge"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeFromTopEdge, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeFromTopEdge, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeFromRightEdge, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeFromRightEdge = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeFromRightEdge"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeFromRightEdge, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeFromRightEdge, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeFromLeftEdge, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeFromLeftEdge = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeFromLeftEdge"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeFromLeftEdge, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeFromLeftEdge, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeDiagonalDownLeft, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeDiagonalDownLeft = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeDiagonalDownLeft"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeDiagonalDownLeft, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeDiagonalDownLeft, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeDiagonalDownRight, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeDiagonalDownRight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeDiagonalDownRight"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeDiagonalDownRight, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeDiagonalDownRight, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeDiagonalUpLeft, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeDiagonalUpLeft = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeDiagonalUpLeft"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeDiagonalUpLeft, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeDiagonalUpLeft, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeDiagonalUpRight, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeDiagonalUpRight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeDiagonalUpRight"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeDiagonalUpRight, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeDiagonalUpRight, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeDown, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeDown = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeDown, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeDown, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeUp, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeUp = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeUp"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeUp, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeUp, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeRight, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeRight = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeRight"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeRight, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeRight, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSupportsSwipeLeft, FGestureSupportedSwipeTypes, uint8);
			UProperty* NewProp_bSupportsSwipeLeft = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bSupportsSwipeLeft"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSupportsSwipeLeft, FGestureSupportedSwipeTypes), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(bSupportsSwipeLeft, FGestureSupportedSwipeTypes), sizeof(uint8), false);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeFromBottomEdge, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeFromBottomEdge, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeFromTopEdge, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeFromTopEdge, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeFromRightEdge, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeFromRightEdge, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeFromLeftEdge, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeFromLeftEdge, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeDiagonalDownLeft, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeDiagonalDownLeft, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeDiagonalDownRight, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeDiagonalDownRight, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeDiagonalUpLeft, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeDiagonalUpLeft, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeDiagonalUpRight, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeDiagonalUpRight, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeDown, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeDown, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeUp, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeUp, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeRight, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeRight, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_bSupportsSwipeLeft, TEXT("Category"), TEXT("GestureSupportedSwipeTypes"));
			MetaData->SetValue(NewProp_bSupportsSwipeLeft, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_USwipeGestureRecognizer_FGestureSupportedSwipeTypes_CRC() { return 1786629059U; }
	UFunction* Z_Construct_UFunction_USwipeGestureRecognizer_DelayHandleSwipe()
	{
		UClass* OuterClass=Z_Construct_UClass_USwipeGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DelayHandleSwipe"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USwipeGestureRecognizer_GetSwipeType()
	{
		struct SwipeGestureRecognizer_eventGetSwipeType_Parms
		{
			TEnumAsByte<ESwipeType> ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_USwipeGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GetSwipeType"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SwipeGestureRecognizer_eventGetSwipeType_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, SwipeGestureRecognizer_eventGetSwipeType_Parms), 0x0000000000000580, Z_Construct_UEnum_USwipeGestureRecognizer_ESwipeType());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USwipeGestureRecognizer_NoRegister()
	{
		return USwipeGestureRecognizer::StaticClass();
	}
	UClass* Z_Construct_UClass_USwipeGestureRecognizer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGestureRecognizerComponent();
			Z_Construct_UPackage_GestureSample();
			OuterClass = USwipeGestureRecognizer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UEnum_USwipeGestureRecognizer_ESwipeType()); // 2640501117
				OuterClass->LinkChild(Z_Construct_UScriptStruct_USwipeGestureRecognizer_FGestureSupportedSwipeTypes()); // 1786629059
				OuterClass->LinkChild(Z_Construct_UFunction_USwipeGestureRecognizer_DelayHandleSwipe());
				OuterClass->LinkChild(Z_Construct_UFunction_USwipeGestureRecognizer_GetSwipeType());

				UProperty* NewProp_TouchCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchCount"), RF_Public|RF_Transient|RF_Native) UInt8Property(CPP_PROPERTY_BASE(TouchCount, USwipeGestureRecognizer), 0x0000000000020801);
				UProperty* NewProp_SwipeType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SwipeType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(SwipeType, USwipeGestureRecognizer), 0x0000000000020801, Z_Construct_UEnum_USwipeGestureRecognizer_ESwipeType());
				UProperty* NewProp_MaximumTouches = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumTouches"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MaximumTouches, USwipeGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MinimumTouches = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumTouches"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(MinimumTouches, USwipeGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MaximumGestureDuration = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumGestureDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaximumGestureDuration, USwipeGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_SupportedSwipes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SupportedSwipes"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SupportedSwipes, USwipeGestureRecognizer), 0x0000000000000001, Z_Construct_UScriptStruct_USwipeGestureRecognizer_FGestureSupportedSwipeTypes());
				UProperty* NewProp_Tolerance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Tolerance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Tolerance, USwipeGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MinimumSwipeDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumSwipeDistance"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinimumSwipeDistance, USwipeGestureRecognizer), 0x0000000000000001);
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwipeGestureRecognizer_DelayHandleSwipe()); // 4015163087
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_USwipeGestureRecognizer_GetSwipeType()); // 2195078632
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Input"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A gesture recognizer component to detect swipes. This recognizer does not support the GestureMoved delegate call. Delegates are only notified when a swipe has been detected. If delegates need notice during a swipe, a pan gesture recognizer should be used as well."));
				MetaData->SetValue(NewProp_TouchCount, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_TouchCount, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(NewProp_TouchCount, TEXT("ToolTip"), TEXT("The number of fingers swiped"));
				MetaData->SetValue(NewProp_SwipeType, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_SwipeType, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(NewProp_SwipeType, TEXT("ToolTip"), TEXT("When a delegate is informed of a swipe, it can query this field to identify which type of swipe was detected"));
				MetaData->SetValue(NewProp_MaximumTouches, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MaximumTouches, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MaximumTouches, TEXT("ToolTip"), TEXT("The maximum number of fingers that can touch the screen during the swipe for it to count"));
				MetaData->SetValue(NewProp_MinimumTouches, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MinimumTouches, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MinimumTouches, TEXT("ToolTip"), TEXT("The minimum number of fingers that must touch the screen during the swipe for it to count"));
				MetaData->SetValue(NewProp_MaximumGestureDuration, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MaximumGestureDuration, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MaximumGestureDuration, TEXT("ToolTip"), TEXT("The maximum amount of time the gesture can take, from touch down to touch up, to count as a swipe"));
				MetaData->SetValue(NewProp_SupportedSwipes, TEXT("Category"), TEXT("Gestures|Supported Swipes"));
				MetaData->SetValue(NewProp_SupportedSwipes, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(NewProp_SupportedSwipes, TEXT("ToolTip"), TEXT("Which types of swipes this recognizer should look for"));
				MetaData->SetValue(NewProp_Tolerance, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_Tolerance, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(NewProp_Tolerance, TEXT("ToolTip"), TEXT("How far the gesture can travel in the 'wrong' direction (e.g. up/down for a horizontal swipe) before the gesture no longer counts as a swipe. Only use for up/down/left/right, not diagonal"));
				MetaData->SetValue(NewProp_MinimumSwipeDistance, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MinimumSwipeDistance, TEXT("ModuleRelativePath"), TEXT("SwipeGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MinimumSwipeDistance, TEXT("ToolTip"), TEXT("The minimum length of a swipe to register as a swipe"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USwipeGestureRecognizer(Z_Construct_UClass_USwipeGestureRecognizer, TEXT("USwipeGestureRecognizer"));
	UFunction* Z_Construct_UFunction_UTapGestureRecognizer_GetTapLocation()
	{
		struct TapGestureRecognizer_eventGetTapLocation_Parms
		{
			FVector2D ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UTapGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GetTapLocation"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(TapGestureRecognizer_eventGetTapLocation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TapGestureRecognizer_eventGetTapLocation_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_UObject_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnBottomHalf()
	{
		struct TapGestureRecognizer_eventTapWasOnBottomHalf_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UTapGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TapWasOnBottomHalf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TapGestureRecognizer_eventTapWasOnBottomHalf_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TapGestureRecognizer_eventTapWasOnBottomHalf_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TapGestureRecognizer_eventTapWasOnBottomHalf_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TapGestureRecognizer_eventTapWasOnBottomHalf_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnLeftHalf()
	{
		struct TapGestureRecognizer_eventTapWasOnLeftHalf_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UTapGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TapWasOnLeftHalf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TapGestureRecognizer_eventTapWasOnLeftHalf_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TapGestureRecognizer_eventTapWasOnLeftHalf_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TapGestureRecognizer_eventTapWasOnLeftHalf_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TapGestureRecognizer_eventTapWasOnLeftHalf_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnRightHalf()
	{
		struct TapGestureRecognizer_eventTapWasOnRightHalf_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UTapGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TapWasOnRightHalf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TapGestureRecognizer_eventTapWasOnRightHalf_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TapGestureRecognizer_eventTapWasOnRightHalf_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TapGestureRecognizer_eventTapWasOnRightHalf_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TapGestureRecognizer_eventTapWasOnRightHalf_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnTopHalf()
	{
		struct TapGestureRecognizer_eventTapWasOnTopHalf_Parms
		{
			bool ReturnValue;
		};
		UClass* OuterClass=Z_Construct_UClass_UTapGestureRecognizer();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TapWasOnTopHalf"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TapGestureRecognizer_eventTapWasOnTopHalf_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TapGestureRecognizer_eventTapWasOnTopHalf_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TapGestureRecognizer_eventTapWasOnTopHalf_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TapGestureRecognizer_eventTapWasOnTopHalf_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Gestures|Result"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTapGestureRecognizer_NoRegister()
	{
		return UTapGestureRecognizer::StaticClass();
	}
	UClass* Z_Construct_UClass_UTapGestureRecognizer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGestureRecognizerComponent();
			Z_Construct_UPackage_GestureSample();
			OuterClass = UTapGestureRecognizer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTapGestureRecognizer_GetTapLocation());
				OuterClass->LinkChild(Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnBottomHalf());
				OuterClass->LinkChild(Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnLeftHalf());
				OuterClass->LinkChild(Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnRightHalf());
				OuterClass->LinkChild(Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnTopHalf());

				UProperty* NewProp_NumberOfTaps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumberOfTaps"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumberOfTaps, UTapGestureRecognizer), 0x0000000000020801);
				UProperty* NewProp_NumberOfFingersInTap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumberOfFingersInTap"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumberOfFingersInTap, UTapGestureRecognizer), 0x0000000000020801);
				UProperty* NewProp_MaximumTimeBetweenTaps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumTimeBetweenTaps"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaximumTimeBetweenTaps, UTapGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MaximumNumberOfTaps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumNumberOfTaps"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumNumberOfTaps, UTapGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MinimumNumberOfTaps = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumNumberOfTaps"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumNumberOfTaps, UTapGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MaximumTouchCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumTouchCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaximumTouchCount, UTapGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MinimumTouchCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumTouchCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MinimumTouchCount, UTapGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MaximumTimeForTap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumTimeForTap"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaximumTimeForTap, UTapGestureRecognizer), 0x0000000000000001);
				UProperty* NewProp_MinimumTimeForTap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumTimeForTap"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinimumTimeForTap, UTapGestureRecognizer), 0x0000000000000001);
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTapGestureRecognizer_GetTapLocation()); // 3312755782
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnBottomHalf()); // 2581023749
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnLeftHalf()); // 3263439845
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnRightHalf()); // 1295772721
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UTapGestureRecognizer_TapWasOnTopHalf()); // 2013929478
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Input"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Recognizes tap gestures, including multi-tap (double tap, triple tap) gestures and multiple-touch taps (two-finger taps)."));
				MetaData->SetValue(NewProp_NumberOfTaps, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_NumberOfTaps, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(NewProp_NumberOfFingersInTap, TEXT("Category"), TEXT("Gestures|Result"));
				MetaData->SetValue(NewProp_NumberOfFingersInTap, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MaximumTimeBetweenTaps, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MaximumTimeBetweenTaps, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MaximumTimeBetweenTaps, TEXT("ToolTip"), TEXT("If looking for multi-taps, the maximum amount of time that can elapse from the start of one tap until the start of the next tap for them to be considered a single gesture *"));
				MetaData->SetValue(NewProp_MaximumNumberOfTaps, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MaximumNumberOfTaps, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MaximumNumberOfTaps, TEXT("ToolTip"), TEXT("The maximum multiple tap (double, triple) that this recognizer will recognize."));
				MetaData->SetValue(NewProp_MinimumNumberOfTaps, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MinimumNumberOfTaps, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MinimumNumberOfTaps, TEXT("ToolTip"), TEXT("If checking for multiple taps (double-tap, triple-tap), set this value to a value higher than one"));
				MetaData->SetValue(NewProp_MaximumTouchCount, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MaximumTouchCount, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MaximumTouchCount, TEXT("ToolTip"), TEXT("The maximum number of fingers that must have been used to register as a tap"));
				MetaData->SetValue(NewProp_MinimumTouchCount, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MinimumTouchCount, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MinimumTouchCount, TEXT("ToolTip"), TEXT("The minimum number of fingers that must have been used to register as a tap"));
				MetaData->SetValue(NewProp_MaximumTimeForTap, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MaximumTimeForTap, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MaximumTimeForTap, TEXT("ToolTip"), TEXT("The maximum amount of time the finger can stay on the screen for it to count as a tap."));
				MetaData->SetValue(NewProp_MinimumTimeForTap, TEXT("Category"), TEXT("Gestures"));
				MetaData->SetValue(NewProp_MinimumTimeForTap, TEXT("ModuleRelativePath"), TEXT("TapGestureRecognizer.h"));
				MetaData->SetValue(NewProp_MinimumTimeForTap, TEXT("ToolTip"), TEXT("Minimum amount of time (in seconds) that the finger can be on the screen to trigger this gesture. Typically 0.0, but can be longer if a long-tap is desired"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTapGestureRecognizer(Z_Construct_UClass_UTapGestureRecognizer, TEXT("UTapGestureRecognizer"));
	UPackage* Z_Construct_UPackage_GestureSample()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/GestureSample")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0x6D9BF1F7;
			Guid.B = 0x73898D71;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);
		}
		return ReturnPackage;
	}
#endif

